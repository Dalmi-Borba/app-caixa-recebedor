<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
    <title>Caixa ASM</title>
    <link rel="icon" type="image/png" sizes="512x512" href="assets/img/iasdfavicon.png">
    <link rel="stylesheet" href="css/input_valor.css">
</head>
<style>
    * { box-sizing: border-box; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 0; }
    body { background-color: #f2f4f8; padding: 2rem; }
    .navbar { display: flex; justify-content: center; background-color: #fff; border: 2px solid #aaa; border-radius: 15px; margin-bottom: 2rem; padding: 1rem; gap: 4rem; }
    .navbar a { text-decoration: none; color: #333; font-weight: bold; }
    nav { background-color: #000; padding: 1rem; text-align: center; }
    nav a { color: #fff; margin: 0 1rem; text-decoration: none; font-weight: bold; }
    header { background-color: #000; height: 60px; }
    .section-top { padding: 3rem 1rem; text-align: center; }
    .section-top p { font-size: 1.6rem; font-weight: 500; }
    .section-top strong { color: green; }
    .center { display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; gap: 1rem; }
    .center h5 { font-size: 1.2rem; margin-bottom: 1rem; }
    .center input { width: 100%; padding: 2px; font-size: 1rem; }
    .center button { width: 100%; max-width: 300px; padding: 12px; font-size: 1rem; background-color: #fff; color: #000; border: 2px solid #000; border-radius: 5px; cursor: pointer; transition: all 0.3s; }
    .center button:hover { background-color: #000; color: #fff; border: 2px solid #fff; }
    fieldset { width: 300px; margin: 2px auto; border: 2px solid black; border-radius: 8px; padding: 10px; }
    select { width: 100%; padding: 2px; font-size: 1rem; border: 1px solid #ccc; border-radius: 5px; }

  .valor-item {
    display: flex;
    align-items: center;       /* alinha verticalmente */
    gap: 6px;                  /* espaço entre elementos */
    margin-bottom: 6px;
  }
  .valor-item label {
    white-space: nowrap;       /* impede quebra */
  }
  .valor-item .remover {
    cursor: pointer;
    font-size: 1.2rem;
    color: red;                 /* ícone vermelho */
    margin-left: 6px;
  }
  .valor-item .remover:hover {
    filter: brightness(0.8);
  }
</style>
<body>
    <div class="navbar">
        <a class="nav-link active" href="/">Home</a>
        <a class="nav-link" href="/view">Solicitações</a>
        <a class="nav-link" href="/movimentos">Movimentos</a>
    </div>

    <section>
        <div class="center">
            <form onsubmit="send()" action="/" method="POST" enctype="multipart/form-data">
              <h3>Depósito, Transferência ou PIX</h3>

              <fieldset>
                  <legend>Comprovante | Extrato</legend>
                  <input class="" type="file" id="image" name="image" required>
              </fieldset>
              <!-- REMOVIDO: Data de Recebimento global -->

              <fieldset>
                  <legend>Conta Bancaria Recebedora</legend>
                  <select name="conta" id="conta" required>
                      <% contas.forEach(item => { %>
                          <option value="<%= item.conta %>"><%= item.conta %></option>
                      <% }); %>
                  </select>
              </fieldset>

              <fieldset>
                  <legend>Tipo</legend>
                  <div style="display: flex; gap: 1rem;">
                      <input type="radio" id="mat" name="mat" value="mat" required>
                      <label for="mat">Material</label>
                      <input type="radio" id="ins" name="mat" value="ins">
                      <label for="ins">Inscrição</label>
                  </div>
              </fieldset>

              <fieldset>
                  <legend>Descrição</legend>
                  <select name="material" id="material" required>
                      <option value=""></option>
                      <% desc.forEach(item => { %>
                      <option value="<%= item.desc %>"><%= item.desc %></option>
                      <% }) %>
                  </select>
              </fieldset>

              <fieldset>
                  <legend>Departamento</legend>
                  <select name="depto" id="depto" required>
                    <option value=""></option>
                    <% depto.forEach(item => { %>
                    <option value="<%= item.nun_depto %> - <%= item.nome_depto %>"><%= item.nome_depto %></option>
                    <% }) %>
                  </select>
              </fieldset>

              <fieldset style="width: 900px;">
                  <label for="valor-total">Valor Total:</label>
                  <input style="width: 100px;" type="text" id="valor-total" readonly>
                  <br><br>

                  <legend>Valores e Datas de Recebimento</legend>
                  <div id="valores-container">
                    <div class="valor-item">
                      <label>Pagador</label>
                      <input style="width: 180px;" type="text" oninput="atualizarHidden()" placeholder="Pagador" class="pagador-input" required>
                      <label>Valor</label>
                      <input style="width: 120px;" type="text" oninput="mascaraMoeda(event); atualizarHidden()" placeholder="Valor" class="valor-input" required>
                      <label for="data">Modalidade</label>
                        <select style="width: 100px;" class="flag-input" required onchange="atualizarHidden()">
                          <option value="dep">Depósito</option>
                          <option value="trans">Transferência</option>
                          <option value="pix">PIX</option>
                        </select>
                      <label>Data</label>
                      <input style="width: 150px;" type="date" class="data-input" oninput="atualizarHidden()" required>
                      <span class="remover" onclick="removerValor(this)">❎</span>
                    </div>
                  </div>

                  <a style="color: blue;" onclick="adicionarValor()">+ Adicionar</a>

                  <!-- Hiddens alinhados por índice: pagador[i] ↔ valor[i] ↔ data[i] -->
                  <input type="hidden" id="pagador-hidden" name="nome">
                  <input type="hidden" id="valor-hidden" name="valor">
                  <input type="hidden" id="datas-hidden" name="date">
                  <input type="hidden" id="flags-hidden"   name="flag"> 

              </fieldset>

              <fieldset>
                  <legend>Observações</legend>
                  <textarea class="" id="obs" name="obs"></textarea>
              </fieldset>
              <br>
              <button class="btn btn-primary shadow d-block w-100" type="submit">Enviar</button>

              <input type="hidden" name="aprovacao" id="aprovacao" value="false">
              <input type="hidden" name="tipo" id="tipo" value="pessoa">
          </form>
        </div>
    </section>
<script>
  // Helpers
  function todayISO() {
    const d = new Date();
    // Ajusta timezone local sem deslocar a data
    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());
    return d.toISOString().slice(0,10);
  }

  function maskCurrency(valor, locale = 'pt-BR', currency = 'BRL') {
    const num = Number(valor);
    if (Number.isNaN(num)) return '';
    return new Intl.NumberFormat(locale, { style: 'currency', currency }).format(num);
  }

  function mascaraMoeda(event) {
    const onlyDigits = event.target.value
      .split("")
      .filter(s => /\d/.test(s))
      .join("")
      .padStart(3, "0");
    const digitsFloat = onlyDigits.slice(0, -2) + "." + onlyDigits.slice(-2);
    // guarda como monetário BRL
    event.target.value = maskCurrency(digitsFloat);
  }

  // Cria novo bloco pagador+valor+modalidade+data
  function adicionarValor() {
    const container = document.getElementById('valores-container');

    const div = document.createElement('div');
    div.classList.add('valor-item');

    div.innerHTML = `
      <label>Pagador</label>
      <input style="width: 180px;" type="text" oninput="atualizarHidden()" placeholder="Pagador" class="pagador-input" required>
      <label>Valor</label>
      <input style="width: 120px;" type="text" oninput="mascaraMoeda(event); atualizarHidden()" placeholder="Valor" class="valor-input" required>
      <label for="data">Modalidade</label>
      <select style="width: 100px;" class="flag-input" required onchange="atualizarHidden()">
        <option value="dep">Depósito</option>
        <option value="trans">Transferência</option>
        <option value="pix">PIX</option>
      </select>
      <label>Data</label>
      <input style="width: 160px;" type="date" class="data-input" oninput="atualizarHidden()" required>
      <span class="remover" onclick="removerValor(this)">❎</span>
    `;

    container.appendChild(div);

    // Pré-preenche a data com hoje
    const lastDate = div.querySelector('.data-input');
    lastDate.value = todayISO();

    atualizarHidden();
  }

  function removerValor(botao) {
    const container = document.getElementById('valores-container');
    if (container.children.length > 1) {
      botao.parentElement.remove();
      atualizarHidden();
    }
  }

  // Atualiza strings hidden e o total
  function atualizarHidden() {
    const itens = Array.from(document.querySelectorAll('#valores-container .valor-item'));

    const pagadores = [];
    const valoresFormatados = [];
    const datasFormatadas = [];
    const flags = [];

    let soma = 0;

    itens.forEach(item => {
      const pagador = (item.querySelector('.pagador-input')?.value || '').trim();
      const valorStr = (item.querySelector('.valor-input')?.value || '').trim();
      const dataStr  = (item.querySelector('.data-input')?.value  || '').trim();
      const flagSel  = (item.querySelector('.flag-input')?.value  || '').trim();

      // Empilha sempre por índice para manter alinhamento
      pagadores.push(pagador);
      valoresFormatados.push(valorStr);
      datasFormatadas.push(dataStr);
      flags.push(flagSel);

      // Soma valor se houver número válido
      if (valorStr) {
        const num = Number(
          valorStr
            .replace('R$', '')
            .replace(/\s/g, '')
            .replace(/\./g, '')
            .replace(',', '.')
        );
        if (!Number.isNaN(num)) soma += num;
      }
    });

    // Preenche hiddens para o backend
    document.getElementById('pagador-hidden').value = pagadores.join('; ');
    document.getElementById('valor-hidden').value   = valoresFormatados.join('; ');
    document.getElementById('datas-hidden').value   = datasFormatadas.join('; ');
    document.getElementById('flags-hidden').value   = flags.join('; ');

    // Exibe o total formatado em BRL
    document.getElementById('valor-total').value = maskCurrency(soma);
  }

  // Garante atualização antes de enviar
  (function init() {
    const firstDate = document.querySelector('.data-input');
    if (firstDate) firstDate.value = todayISO();

    // Se o primeiro select de modalidade já existe, garanta onchange
    const firstFlag = document.querySelector('.flag-input');
    if (firstFlag) firstFlag.addEventListener('change', atualizarHidden);

    // Garante atualização inicial
    atualizarHidden();

    // Garante que o hidden esteja sincronizado no submit
    const form = document.querySelector('form');
    form.addEventListener('submit', () => atualizarHidden());
  })();
</script>
    <%- include('./partials/auto_complete'); %>
    <%- include('./partials/script'); %>
</body>
</html>
