<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
  <title>Caixa ASM</title>
  <link rel="icon" type="image/png" sizes="16x16" href="assets/img/iasdfavicon.png">
  <link rel="stylesheet" href="assets/bootstrap/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Inter:300italic,400italic,600italic,700italic,800italic,400,300,600,700,800&display=swap">
  <style>
    body {
      background: #f9f9f9;
      font-family: 'Segoe UI', sans-serif;
      padding: 2rem;
    }

    .navbar {
      display: flex;
      justify-content: center;
      background: #fff;
      border: 2px solid #aaa;
      border-radius: 15px;
      padding: 1rem;
      gap: 3rem;
      margin-bottom: 2rem;
    }

    .navbar a {
      text-decoration: none;
      color: #333;
      font-weight: bold;
    }

    .d-flex {
      gap: 1rem;
    }

    textarea {
      font-family: monospace;
    }
  </style>
</head>
<body>
  <div class="navbar">
    <a href="/">Home</a>
    <a href="/view">Solicitações</a>
    <a href="/movimentos">Movimentos</a>
    <a class="nav-link" href="/filtrar">Filtros</a>
  </div>

  <section>
    <% 
      var hoje = new Date();
      var ano = hoje.getFullYear();
      var mes = (hoje.getMonth() + 1).toString().padStart(2, '0');
      var dia = hoje.getDate().toString().padStart(2, '0');
    %> 
    <div class="d-flex justify-content-center">
      <input type="text" id="titulo" value="<%= `${dia}.${mes}.${ano}` %>" placeholder="Nome do Arquivo">
      <button onclick="salvar()">Salvar</button>
    </div>

    <br>

    <%
      let names_files = '';
      items.forEach(image => {
        const name = image?.img?.name;
        if (name && typeof name === 'string') {
          names_files += path_public + name + '.pdf,';
        }
      });
    %>

    <div class="d-flex justify-content-center">
      <form action="/merge" method="post">
        <input type="hidden" name="dirs" value="<%= names_files %>">
        <input type="submit" value="Gerar PDF">
      </form>
    </div>

    <br><br>

    <div class="d-flex justify-content-center">
      <textarea id="texto" cols="120" rows="80"></textarea>
    </div>
  </section>

  <!-- SCRIPTS -->
  <script src="assets/js/jquery.min.js"></script>
  <script src="assets/bootstrap/js/bootstrap.min.js"></script>
  <script src="assets/js/bold-and-dark.js"></script>

  <!-- FileSaver (inalterado) -->
  <script>
    (function(a,b){if("function"==typeof define&&define.amd)define([],b);else if("undefined"!=typeof exports)b();else{b(),a.FileSaver={exports:{}}.exports}})(this,function(){"use strict";function b(a,b){return"undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Deprecated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open("GET",a),d.responseType="blob",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error("could not download file")},d.send()}function d(a){var b=new XMLHttpRequest;b.open("HEAD",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"))}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof global&&global.global===global?global:void 0,a=/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||("object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open("","_blank"),g&&(g.document.title=g.document.body.innerText="downloading..."),"string"==typeof b)return c(b,d,e);var h="application/octet-stream"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\/[\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&"undefined"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g,"undefined"!=typeof module&&(module.exports=g)});
  </script>

  <!-- Geração do CSV com suporte a múltiplos valores **e múltiplas datas** -->
<!-- Geração do CSV com suporte a múltiplos valores/nome/data/flag por índice -->
<!-- Geração do CSV com múltiplos valores/nome/data/flag por índice -->
<script>
  function salvar() {
    let texto = document.getElementById("texto").value;
    let titulo = document.getElementById("titulo").value;
    let blob = new Blob([texto], { type: "text/plain;charset=utf-8" });
    saveAs(blob, titulo + ".csv");
  }

  (function gerarTexto() {
    const items = <%- JSON.stringify(items) %>;

    // === Ajuste aqui os códigos contábeis usados no 1º campo ===
    const CONTA_ATUAL = '1112001';        // mês corrente (ex.: Banco conta movimento)
    const CONTA_MES_ANTERIOR = '[não identificado a regularizar]'; // mês anterior (ex.: Depósito a efetuar) ← ajuste se for outro

    const hoje = new Date();
    const curY = hoje.getFullYear();
    const curM = hoje.getMonth() + 1;

    // ===== Helpers =====
    const sanitize = (str = "") =>
      String(str).normalize("NFD").replace(/[\u0300-\u036f]/g, "");

    const limparValorParaCentavos = (v) =>
      (String(v).replace(/[^\d]/g, "")) || "0";

    function splitLista(v) {
      if (Array.isArray(v)) {
        return v.flatMap(x => String(x).split(";")).map(s => s.trim()).filter(Boolean);
      }
      if (typeof v === "string") {
        return v.split(";").map(s => s.trim()).filter(Boolean);
      }
      return [];
    }

    const normalizarValores = splitLista;
    const normalizarDatas   = splitLista; // espera yyyy-mm-dd
    const normalizarFlags   = splitLista; // 'pix' | 'trans' | 'dep'
    const normalizarNomes   = splitLista;

    function dataBR(iso = "") {
      if (!iso) return "";
      const d = String(iso).slice(0,10);
      const [y,m,dd] = d.split("-");
      if (!y||!m||!dd) return "";
      return `${dd}/${m}/${y}`;
    }

    function ymFromISO(iso = "") {
      const s = String(iso).slice(0,10);
      const [y,m] = s.split("-");
      return { y: Number(y)||0, m: Number(m)||0 };
    }

    function isPrevMonth(y, m) {
      let py = curY, pm = curM - 1;
      if (pm === 0) { pm = 12; py = curY - 1; }
      return (y === py && m === pm);
    }

    function competenciaStrFromISO(iso = "", fallbackY = curY, fallbackM = curM) {
      const { y, m } = ymFromISO(iso);
      const yy = y || fallbackY, mm = m || fallbackM;
      return `${String(mm).padStart(2,'0')}/${String(yy)}`;
    }

    let textoFinal = "145111;União Centro Oeste Brasileira da I.A.S.D.\n";

    items.forEach(image => {
      const nomesLista   = normalizarNomes(image.nome);
      const valoresLista = normalizarValores(image.valor);
      const datasLista   = normalizarDatas(image.data);
      const flagsLista   = normalizarFlags(image.flag);

      if (valoresLista.length === 0) return;

      const material = sanitize(image.material);
      const matIns   = image.mat_ins === "mat" ? "Almox." : "Inscricao";
      const conta_bancaria = image.conta ? image.conta : "";
      const depto    = image.depto;

      const pickByIndex = (lista, i) =>
        lista.length === 0 ? "" : (lista.length === 1 ? lista[0] : (lista[i] || lista[lista.length - 1]));

      valoresLista.forEach((valorStr, i) => {
        const valorCent = limparValorParaCentavos(valorStr);

        const dataISO   = pickByIndex(datasLista, i);
        const dataBRstr = dataBR(dataISO);
        const compStr   = competenciaStrFromISO(dataISO);
        const { y, m }  = ymFromISO(dataISO);
        const nomeI     = sanitize(pickByIndex(nomesLista, i));
        const flagI     = (pickByIndex(flagsLista, i) || "").toLowerCase(); // 'pix'|'trans'|'dep'|''

        const ehMesAnterior = y && m ? isPrevMonth(y, m) : false;

        // === tipos especiais inalterados ===
        if (image.tipo === "iasd") {
          textoFinal += `1139090;22;10;0000;0A;${valorCent};N;"${matIns} ${material} ${compStr} - ${nomeI}";;;"";;\n`;
          textoFinal += `4149510;99;10;${depto};0E;-${valorCent};N;"${matIns} ${material} ${compStr} - ${nomeI}";;;"";;\n`;
          return;
        }
        if (image.tipo === "cartao") {
          if (image.tipo_cartao === "credito") {
            const avista_parcelado = (image.nun_parcela === '1' || image.nun_parcela === '0') ? 'A Vista' : 'Parcelas';
            const parc = (image.nun_parcela === '1' || image.nun_parcela === '0') ? '' : image.nun_parcela;
            textoFinal += `2164025;1001;10;0000;0A;${valorCent};N;"Vda ${image.vda} - ${dataBRstr} - ${parc} ${avista_parcelado}";;;"";;\n`;
            textoFinal += `4149510;99;10;${depto};0E;-${valorCent};N;"${matIns} ${material} ${compStr} - ${nomeI}";;;"";;\n`;
          } else {
            textoFinal += `2164025;1001;10;0000;0A;${valorCent};N;"Vda ${image.vda} - ${dataBRstr} -  A Vista";;;"";;\n`;
            textoFinal += `4149510;99;10;${depto};0E;-${valorCent};N;"${matIns} ${material} ${compStr} - ${nomeI}";;;"";;\n`;
          }
          return;
        }
        if (image.tipo === "func") {
          textoFinal += `1135001;[CODIGO FUNCIONARIO];10;0000;0A;${valorCent};N;"Adto. ${compStr} - ${nomeI}";;;"";;\n`;
          textoFinal += `4149510;99;10;${depto};0E;-${valorCent};N;"${matIns} ${material} ${compStr} - ${nomeI}";;;"";;\n`;
          return;
        }
        if (image.tipo === "caixa") {
          textoFinal += `1111025;;10;0000;0A;${valorCent};N;"Deposito a Efetuar - ${compStr}";;;"";;\n`;
          textoFinal += `4149510;99;10;${depto};0E;-${valorCent};N;"${matIns} ${material} ${compStr} - ${nomeI}";;;"";;\n`;
          return;
        }

        // === DEPÓSITO / TRANSFERÊNCIA / PIX ===
        // 1) Descrição da 1ª linha (banco)
        let descBanco;
        switch (flagI) {
          case "pix":
            descBanco = `Transf.PIX ${dataBRstr}` + (nomeI ? ` - ${nomeI}` : "");
            break;
          case "trans":
            descBanco = `Transf.Dia ${dataBRstr}` + (nomeI ? ` - ${nomeI}` : "");
            break;
          case "dep":
            descBanco = `Depósito ${dataBRstr}`; // sem nome
            break;
          default:
            descBanco = `PIX Transf.PIX ${dataBRstr}` + (nomeI ? ` - ${nomeI}` : "");
        }

        // 2) Conta contábil muda se for mês anterior
        const contaContabil = ehMesAnterior ? CONTA_MES_ANTERIOR : CONTA_ATUAL;

        // 1ª linha (banco): [conta contábil];[conta_bancaria];...
        textoFinal += `${contaContabil};${conta_bancaria};10;0000;0A;${valorCent};N;"${descBanco}";;;"";;\n`;

        // 2ª linha (contrapartida): competência pela DATA do índice
        const descContra = `${matIns} ${material} ${compStr}` + (nomeI ? ` - ${nomeI}` : "");
        textoFinal += `4149510;99;10;${depto};0E;-${valorCent};N;"${descContra}";;;"";;\n`;
      });
    });

    document.getElementById("texto").value = textoFinal;
  })();
</script>

</body>
</html>
